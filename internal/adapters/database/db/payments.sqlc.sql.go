// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sqlc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBankAccount = `-- name: CreateBankAccount :one

INSERT INTO bank_accounts (
    name, account_number, ifsc_or_swift, ledger_account_id, created_by, updated_by
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, account_number, ifsc_or_swift, ledger_account_id, created_at, created_by, updated_at, updated_by, revision
`

type CreateBankAccountParams struct {
	Name            string
	AccountNumber   string
	IfscOrSwift     string
	LedgerAccountID sql.NullString
	CreatedBy       sql.NullString
	UpdatedBy       sql.NullString
}

// =====================================================
// Bank Accounts
// =====================================================
func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, createBankAccount,
		arg.Name,
		arg.AccountNumber,
		arg.IfscOrSwift,
		arg.LedgerAccountID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountNumber,
		&i.IfscOrSwift,
		&i.LedgerAccountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const createPaymentDue = `-- name: CreatePaymentDue :one

INSERT INTO payment_dues (
    invoice_id, amount_due, due_date, status, created_by, updated_by
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, invoice_id, amount_due, due_date, status, created_at, created_by, updated_at, updated_by, revision
`

type CreatePaymentDueParams struct {
	InvoiceID uuid.UUID
	AmountDue string
	DueDate   time.Time
	Status    string
	CreatedBy sql.NullString
	UpdatedBy sql.NullString
}

// =====================================================
// Payment Dues
// =====================================================
func (q *Queries) CreatePaymentDue(ctx context.Context, arg CreatePaymentDueParams) (PaymentDue, error) {
	row := q.db.QueryRowContext(ctx, createPaymentDue,
		arg.InvoiceID,
		arg.AmountDue,
		arg.DueDate,
		arg.Status,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i PaymentDue
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.AmountDue,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM bank_accounts WHERE id = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBankAccount, id)
	return err
}

const deletePaymentDue = `-- name: DeletePaymentDue :exec
DELETE FROM payment_dues WHERE id = $1
`

func (q *Queries) DeletePaymentDue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePaymentDue, id)
	return err
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, name, account_number, ifsc_or_swift, ledger_account_id, created_at, created_by, updated_at, updated_by, revision FROM bank_accounts WHERE id = $1
`

func (q *Queries) GetBankAccount(ctx context.Context, id uuid.UUID) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, getBankAccount, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountNumber,
		&i.IfscOrSwift,
		&i.LedgerAccountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getPaymentDue = `-- name: GetPaymentDue :one
SELECT id, invoice_id, amount_due, due_date, status, created_at, created_by, updated_at, updated_by, revision FROM payment_dues WHERE id = $1
`

func (q *Queries) GetPaymentDue(ctx context.Context, id uuid.UUID) (PaymentDue, error) {
	row := q.db.QueryRowContext(ctx, getPaymentDue, id)
	var i PaymentDue
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.AmountDue,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const importBankTransaction = `-- name: ImportBankTransaction :one

INSERT INTO bank_transactions (
    bank_account_id, amount, transaction_date, description, reference,
    reconciled, matched_reference_type, matched_reference_id,
    created_by, updated_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8,
    $9, $10
) RETURNING id, bank_account_id, amount, transaction_date, description, reference, reconciled, matched_reference_type, matched_reference_id, created_at, created_by, updated_at, updated_by, revision
`

type ImportBankTransactionParams struct {
	BankAccountID        uuid.UUID
	Amount               string
	TransactionDate      time.Time
	Description          sql.NullString
	Reference            sql.NullString
	Reconciled           sql.NullBool
	MatchedReferenceType sql.NullString
	MatchedReferenceID   uuid.NullUUID
	CreatedBy            sql.NullString
	UpdatedBy            sql.NullString
}

// =====================================================
// Bank Transactions
// =====================================================
func (q *Queries) ImportBankTransaction(ctx context.Context, arg ImportBankTransactionParams) (BankTransaction, error) {
	row := q.db.QueryRowContext(ctx, importBankTransaction,
		arg.BankAccountID,
		arg.Amount,
		arg.TransactionDate,
		arg.Description,
		arg.Reference,
		arg.Reconciled,
		arg.MatchedReferenceType,
		arg.MatchedReferenceID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.BankAccountID,
		&i.Amount,
		&i.TransactionDate,
		&i.Description,
		&i.Reference,
		&i.Reconciled,
		&i.MatchedReferenceType,
		&i.MatchedReferenceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listBankAccounts = `-- name: ListBankAccounts :many
SELECT id, name, account_number, ifsc_or_swift, ledger_account_id, created_at, created_by, updated_at, updated_by, revision FROM bank_accounts
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListBankAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListBankAccounts(ctx context.Context, arg ListBankAccountsParams) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, listBankAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountNumber,
			&i.IfscOrSwift,
			&i.LedgerAccountID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBankTransactions = `-- name: ListBankTransactions :many
SELECT id, bank_account_id, amount, transaction_date, description, reference, reconciled, matched_reference_type, matched_reference_id, created_at, created_by, updated_at, updated_by, revision FROM bank_transactions
WHERE bank_account_id = $1
ORDER BY transaction_date DESC
LIMIT $2 OFFSET $3
`

type ListBankTransactionsParams struct {
	BankAccountID uuid.UUID
	Limit         int32
	Offset        int32
}

func (q *Queries) ListBankTransactions(ctx context.Context, arg ListBankTransactionsParams) ([]BankTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listBankTransactions, arg.BankAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankTransaction
	for rows.Next() {
		var i BankTransaction
		if err := rows.Scan(
			&i.ID,
			&i.BankAccountID,
			&i.Amount,
			&i.TransactionDate,
			&i.Description,
			&i.Reference,
			&i.Reconciled,
			&i.MatchedReferenceType,
			&i.MatchedReferenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentDues = `-- name: ListPaymentDues :many
SELECT id, invoice_id, amount_due, due_date, status, created_at, created_by, updated_at, updated_by, revision FROM payment_dues
ORDER BY due_date ASC
LIMIT $1 OFFSET $2
`

type ListPaymentDuesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPaymentDues(ctx context.Context, arg ListPaymentDuesParams) ([]PaymentDue, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentDues, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentDue
	for rows.Next() {
		var i PaymentDue
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.AmountDue,
			&i.DueDate,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPaymentAsPaid = `-- name: MarkPaymentAsPaid :one
UPDATE payment_dues
SET status = 'PAID',
    updated_at = now(),
    updated_by = $2,
    revision = revision + 1
WHERE id = $1
RETURNING id, invoice_id, amount_due, due_date, status, created_at, created_by, updated_at, updated_by, revision
`

type MarkPaymentAsPaidParams struct {
	ID        uuid.UUID
	UpdatedBy sql.NullString
}

func (q *Queries) MarkPaymentAsPaid(ctx context.Context, arg MarkPaymentAsPaidParams) (PaymentDue, error) {
	row := q.db.QueryRowContext(ctx, markPaymentAsPaid, arg.ID, arg.UpdatedBy)
	var i PaymentDue
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.AmountDue,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const reconcileTransaction = `-- name: ReconcileTransaction :one
UPDATE bank_transactions
SET reconciled = true,
    matched_reference_type = $2,
    matched_reference_id = $3,
    updated_at = now(),
    updated_by = $4,
    revision = revision + 1
WHERE id = $1
RETURNING id, bank_account_id, amount, transaction_date, description, reference, reconciled, matched_reference_type, matched_reference_id, created_at, created_by, updated_at, updated_by, revision
`

type ReconcileTransactionParams struct {
	ID                   uuid.UUID
	MatchedReferenceType sql.NullString
	MatchedReferenceID   uuid.NullUUID
	UpdatedBy            sql.NullString
}

func (q *Queries) ReconcileTransaction(ctx context.Context, arg ReconcileTransactionParams) (BankTransaction, error) {
	row := q.db.QueryRowContext(ctx, reconcileTransaction,
		arg.ID,
		arg.MatchedReferenceType,
		arg.MatchedReferenceID,
		arg.UpdatedBy,
	)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.BankAccountID,
		&i.Amount,
		&i.TransactionDate,
		&i.Description,
		&i.Reference,
		&i.Reconciled,
		&i.MatchedReferenceType,
		&i.MatchedReferenceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const updateBankAccount = `-- name: UpdateBankAccount :one
UPDATE bank_accounts
SET name = $2,
    account_number = $3,
    ifsc_or_swift = $4,
    ledger_account_id = $5,
    updated_by = $6,
    updated_at = now(),
    revision = revision + 1
WHERE id = $1
RETURNING id, name, account_number, ifsc_or_swift, ledger_account_id, created_at, created_by, updated_at, updated_by, revision
`

type UpdateBankAccountParams struct {
	ID              uuid.UUID
	Name            string
	AccountNumber   string
	IfscOrSwift     string
	LedgerAccountID sql.NullString
	UpdatedBy       sql.NullString
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, updateBankAccount,
		arg.ID,
		arg.Name,
		arg.AccountNumber,
		arg.IfscOrSwift,
		arg.LedgerAccountID,
		arg.UpdatedBy,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountNumber,
		&i.IfscOrSwift,
		&i.LedgerAccountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const updatePaymentDue = `-- name: UpdatePaymentDue :one
UPDATE payment_dues
SET invoice_id = $2,
    amount_due = $3,
    due_date = $4,
    status = $5,
    updated_by = $6,
    updated_at = now(),
    revision = revision + 1
WHERE id = $1
RETURNING id, invoice_id, amount_due, due_date, status, created_at, created_by, updated_at, updated_by, revision
`

type UpdatePaymentDueParams struct {
	ID        uuid.UUID
	InvoiceID uuid.UUID
	AmountDue string
	DueDate   time.Time
	Status    string
	UpdatedBy sql.NullString
}

func (q *Queries) UpdatePaymentDue(ctx context.Context, arg UpdatePaymentDueParams) (PaymentDue, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentDue,
		arg.ID,
		arg.InvoiceID,
		arg.AmountDue,
		arg.DueDate,
		arg.Status,
		arg.UpdatedBy,
	)
	var i PaymentDue
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.AmountDue,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}
