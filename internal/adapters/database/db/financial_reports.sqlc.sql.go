// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: financial_reports.sqlc.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addTrialBalanceEntry = `-- name: AddTrialBalanceEntry :one
INSERT INTO trial_balance_entries (
    report_id, ledger_account, debit, credit
) VALUES ($1, $2, $3, $4)
RETURNING id, report_id, ledger_account, debit, credit, created_at, created_by
`

type AddTrialBalanceEntryParams struct {
	ReportID      uuid.UUID
	LedgerAccount string
	Debit         string
	Credit        string
}

func (q *Queries) AddTrialBalanceEntry(ctx context.Context, arg AddTrialBalanceEntryParams) (TrialBalanceEntry, error) {
	row := q.db.QueryRowContext(ctx, addTrialBalanceEntry,
		arg.ReportID,
		arg.LedgerAccount,
		arg.Debit,
		arg.Credit,
	)
	var i TrialBalanceEntry
	err := row.Scan(
		&i.ID,
		&i.ReportID,
		&i.LedgerAccount,
		&i.Debit,
		&i.Credit,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const createTrialBalanceReport = `-- name: CreateTrialBalanceReport :one

INSERT INTO trial_balance_reports (
    organization_id, period_start, period_end
) VALUES ($1, $2, $3)
RETURNING id, organization_id, period_start, period_end, created_at, created_by, updated_at, updated_by, revision
`

type CreateTrialBalanceReportParams struct {
	OrganizationID string
	PeriodStart    time.Time
	PeriodEnd      time.Time
}

// ============================
// Trial Balance
// ============================
func (q *Queries) CreateTrialBalanceReport(ctx context.Context, arg CreateTrialBalanceReportParams) (TrialBalanceReport, error) {
	row := q.db.QueryRowContext(ctx, createTrialBalanceReport, arg.OrganizationID, arg.PeriodStart, arg.PeriodEnd)
	var i TrialBalanceReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const generateBalanceSheetReport = `-- name: GenerateBalanceSheetReport :one

INSERT INTO balance_sheet_reports (
    organization_id, period_start, period_end, total_assets, total_liabilities, net_worth
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, organization_id, period_start, period_end, total_assets, total_liabilities, net_worth, created_at, created_by, updated_at, updated_by, revision
`

type GenerateBalanceSheetReportParams struct {
	OrganizationID   string
	PeriodStart      time.Time
	PeriodEnd        time.Time
	TotalAssets      string
	TotalLiabilities string
	NetWorth         string
}

// ============================
// Balance Sheet
// ============================
func (q *Queries) GenerateBalanceSheetReport(ctx context.Context, arg GenerateBalanceSheetReportParams) (BalanceSheetReport, error) {
	row := q.db.QueryRowContext(ctx, generateBalanceSheetReport,
		arg.OrganizationID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.TotalAssets,
		arg.TotalLiabilities,
		arg.NetWorth,
	)
	var i BalanceSheetReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.TotalAssets,
		&i.TotalLiabilities,
		&i.NetWorth,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const generateComplianceReport = `-- name: GenerateComplianceReport :one

INSERT INTO compliance_reports (
    organization_id, period_start, period_end, jurisdiction, details
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, organization_id, period_start, period_end, jurisdiction, details, created_at, created_by, updated_at, updated_by, revision
`

type GenerateComplianceReportParams struct {
	OrganizationID string
	PeriodStart    time.Time
	PeriodEnd      time.Time
	Jurisdiction   string
	Details        string
}

// ============================
// Compliance Reports
// ============================
func (q *Queries) GenerateComplianceReport(ctx context.Context, arg GenerateComplianceReportParams) (ComplianceReport, error) {
	row := q.db.QueryRowContext(ctx, generateComplianceReport,
		arg.OrganizationID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.Jurisdiction,
		arg.Details,
	)
	var i ComplianceReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.Jurisdiction,
		&i.Details,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const generateProfitLossReport = `-- name: GenerateProfitLossReport :one

INSERT INTO profit_loss_reports (
    organization_id, period_start, period_end, total_revenue, total_expenses, net_profit
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, organization_id, period_start, period_end, total_revenue, total_expenses, net_profit, created_at, created_by, updated_at, updated_by, revision
`

type GenerateProfitLossReportParams struct {
	OrganizationID string
	PeriodStart    time.Time
	PeriodEnd      time.Time
	TotalRevenue   string
	TotalExpenses  string
	NetProfit      string
}

// ============================
// Profit & Loss
// ============================
func (q *Queries) GenerateProfitLossReport(ctx context.Context, arg GenerateProfitLossReportParams) (ProfitLossReport, error) {
	row := q.db.QueryRowContext(ctx, generateProfitLossReport,
		arg.OrganizationID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.TotalRevenue,
		arg.TotalExpenses,
		arg.NetProfit,
	)
	var i ProfitLossReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.TotalRevenue,
		&i.TotalExpenses,
		&i.NetProfit,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getBalanceSheetReport = `-- name: GetBalanceSheetReport :one
SELECT id, organization_id, period_start, period_end, total_assets, total_liabilities, net_worth, created_at, created_by, updated_at, updated_by, revision FROM balance_sheet_reports WHERE id = $1
`

func (q *Queries) GetBalanceSheetReport(ctx context.Context, id uuid.UUID) (BalanceSheetReport, error) {
	row := q.db.QueryRowContext(ctx, getBalanceSheetReport, id)
	var i BalanceSheetReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.TotalAssets,
		&i.TotalLiabilities,
		&i.NetWorth,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getComplianceReport = `-- name: GetComplianceReport :one
SELECT id, organization_id, period_start, period_end, jurisdiction, details, created_at, created_by, updated_at, updated_by, revision FROM compliance_reports WHERE id = $1
`

func (q *Queries) GetComplianceReport(ctx context.Context, id uuid.UUID) (ComplianceReport, error) {
	row := q.db.QueryRowContext(ctx, getComplianceReport, id)
	var i ComplianceReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.Jurisdiction,
		&i.Details,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getProfitLossReport = `-- name: GetProfitLossReport :one
SELECT id, organization_id, period_start, period_end, total_revenue, total_expenses, net_profit, created_at, created_by, updated_at, updated_by, revision FROM profit_loss_reports WHERE id = $1
`

func (q *Queries) GetProfitLossReport(ctx context.Context, id uuid.UUID) (ProfitLossReport, error) {
	row := q.db.QueryRowContext(ctx, getProfitLossReport, id)
	var i ProfitLossReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.TotalRevenue,
		&i.TotalExpenses,
		&i.NetProfit,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getTrialBalanceReport = `-- name: GetTrialBalanceReport :one
SELECT id, organization_id, period_start, period_end, created_at, created_by, updated_at, updated_by, revision FROM trial_balance_reports WHERE id = $1
`

func (q *Queries) GetTrialBalanceReport(ctx context.Context, id uuid.UUID) (TrialBalanceReport, error) {
	row := q.db.QueryRowContext(ctx, getTrialBalanceReport, id)
	var i TrialBalanceReport
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listBalanceSheetReports = `-- name: ListBalanceSheetReports :many
SELECT id, organization_id, period_start, period_end, total_assets, total_liabilities, net_worth, created_at, created_by, updated_at, updated_by, revision FROM balance_sheet_reports
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListBalanceSheetReportsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListBalanceSheetReports(ctx context.Context, arg ListBalanceSheetReportsParams) ([]BalanceSheetReport, error) {
	rows, err := q.db.QueryContext(ctx, listBalanceSheetReports, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BalanceSheetReport
	for rows.Next() {
		var i BalanceSheetReport
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.TotalAssets,
			&i.TotalLiabilities,
			&i.NetWorth,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listComplianceReports = `-- name: ListComplianceReports :many
SELECT id, organization_id, period_start, period_end, jurisdiction, details, created_at, created_by, updated_at, updated_by, revision
FROM compliance_reports
WHERE organization_id = $1
  AND jurisdiction = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListComplianceReportsParams struct {
	OrganizationID string
	Jurisdiction   string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListComplianceReports(ctx context.Context, arg ListComplianceReportsParams) ([]ComplianceReport, error) {
	rows, err := q.db.QueryContext(ctx, listComplianceReports,
		arg.OrganizationID,
		arg.Jurisdiction,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ComplianceReport
	for rows.Next() {
		var i ComplianceReport
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.Jurisdiction,
			&i.Details,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfitLossReports = `-- name: ListProfitLossReports :many
SELECT id, organization_id, period_start, period_end, total_revenue, total_expenses, net_profit, created_at, created_by, updated_at, updated_by, revision FROM profit_loss_reports
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProfitLossReportsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListProfitLossReports(ctx context.Context, arg ListProfitLossReportsParams) ([]ProfitLossReport, error) {
	rows, err := q.db.QueryContext(ctx, listProfitLossReports, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProfitLossReport
	for rows.Next() {
		var i ProfitLossReport
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.TotalRevenue,
			&i.TotalExpenses,
			&i.NetProfit,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrialBalanceEntries = `-- name: ListTrialBalanceEntries :many
SELECT id, report_id, ledger_account, debit, credit, created_at, created_by FROM trial_balance_entries WHERE report_id = $1
`

func (q *Queries) ListTrialBalanceEntries(ctx context.Context, reportID uuid.UUID) ([]TrialBalanceEntry, error) {
	rows, err := q.db.QueryContext(ctx, listTrialBalanceEntries, reportID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrialBalanceEntry
	for rows.Next() {
		var i TrialBalanceEntry
		if err := rows.Scan(
			&i.ID,
			&i.ReportID,
			&i.LedgerAccount,
			&i.Debit,
			&i.Credit,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrialBalanceReports = `-- name: ListTrialBalanceReports :many
SELECT id, organization_id, period_start, period_end, created_at, created_by, updated_at, updated_by, revision FROM trial_balance_reports
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTrialBalanceReportsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListTrialBalanceReports(ctx context.Context, arg ListTrialBalanceReportsParams) ([]TrialBalanceReport, error) {
	rows, err := q.db.QueryContext(ctx, listTrialBalanceReports, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrialBalanceReport
	for rows.Next() {
		var i TrialBalanceReport
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
