// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_events.sqlc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const filterAuditEvents = `-- name: FilterAuditEvents :many
SELECT id, user_id, action, timestamp, details, resource_type, resource_id, created_at
FROM audit_events
WHERE 
    ($1::text IS NULL OR user_id = $1)
    AND ($2::text IS NULL OR action = $2)
    AND ($3::text IS NULL OR resource_type = $3)
    AND ($4::text IS NULL OR resource_id = $4)
    AND ($5::timestamptz IS NULL OR timestamp >= $5)
    AND ($6::timestamptz IS NULL OR timestamp <= $6)
ORDER BY timestamp DESC
LIMIT $7 OFFSET $8
`

type FilterAuditEventsParams struct {
	Column1 string
	Column2 string
	Column3 string
	Column4 string
	Column5 time.Time
	Column6 time.Time
	Limit   int32
	Offset  int32
}

func (q *Queries) FilterAuditEvents(ctx context.Context, arg FilterAuditEventsParams) ([]AuditEvent, error) {
	rows, err := q.db.QueryContext(ctx, filterAuditEvents,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditEvent
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Timestamp,
			&i.Details,
			&i.ResourceType,
			&i.ResourceID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventById = `-- name: GetAuditEventById :one
SELECT id, user_id, action, timestamp, details, resource_type, resource_id, created_at FROM audit_events WHERE id = $1
`

func (q *Queries) GetAuditEventById(ctx context.Context, id uuid.UUID) (AuditEvent, error) {
	row := q.db.QueryRowContext(ctx, getAuditEventById, id)
	var i AuditEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.Timestamp,
		&i.Details,
		&i.ResourceType,
		&i.ResourceID,
		&i.CreatedAt,
	)
	return i, err
}

const listAuditEvents = `-- name: ListAuditEvents :many
SELECT id, user_id, action, timestamp, details, resource_type, resource_id, created_at FROM audit_events
ORDER BY timestamp DESC
LIMIT $1 OFFSET $2
`

type ListAuditEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAuditEvents(ctx context.Context, arg ListAuditEventsParams) ([]AuditEvent, error) {
	rows, err := q.db.QueryContext(ctx, listAuditEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditEvent
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Timestamp,
			&i.Details,
			&i.ResourceType,
			&i.ResourceID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordAuditEvent = `-- name: RecordAuditEvent :one
INSERT INTO audit_events (
    user_id, action, timestamp, details, resource_type, resource_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, action, timestamp, details, resource_type, resource_id, created_at
`

type RecordAuditEventParams struct {
	UserID       string
	Action       string
	Timestamp    time.Time
	Details      sql.NullString
	ResourceType sql.NullString
	ResourceID   sql.NullString
}

func (q *Queries) RecordAuditEvent(ctx context.Context, arg RecordAuditEventParams) (AuditEvent, error) {
	row := q.db.QueryRowContext(ctx, recordAuditEvent,
		arg.UserID,
		arg.Action,
		arg.Timestamp,
		arg.Details,
		arg.ResourceType,
		arg.ResourceID,
	)
	var i AuditEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.Timestamp,
		&i.Details,
		&i.ResourceType,
		&i.ResourceID,
		&i.CreatedAt,
	)
	return i, err
}
