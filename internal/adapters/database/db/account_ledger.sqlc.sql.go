// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_ledger.sqlc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one

INSERT INTO accounts (code, name, type, parent_id, status, allow_manual_journal, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, code, name, type, parent_id, status, allow_manual_journal, created_at, created_by, updated_at, updated_by, revision
`

type CreateAccountParams struct {
	Code               string
	Name               string
	Type               string
	ParentID           uuid.NullUUID
	Status             string
	AllowManualJournal sql.NullBool
	CreatedBy          sql.NullString
	UpdatedBy          sql.NullString
}

// =====================================================
// Accounts
// =====================================================
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Code,
		arg.Name,
		arg.Type,
		arg.ParentID,
		arg.Status,
		arg.AllowManualJournal,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Type,
		&i.ParentID,
		&i.Status,
		&i.AllowManualJournal,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const createJournalEntry = `-- name: CreateJournalEntry :one

INSERT INTO journal_entries (journal_date, reference, memo, source_type, source_id, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, journal_date, reference, memo, source_type, source_id, created_at, created_by, updated_at, updated_by, revision
`

type CreateJournalEntryParams struct {
	JournalDate time.Time
	Reference   sql.NullString
	Memo        sql.NullString
	SourceType  sql.NullString
	SourceID    sql.NullString
	CreatedBy   sql.NullString
	UpdatedBy   sql.NullString
}

// =====================================================
// Journal Entries
// =====================================================
func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, createJournalEntry,
		arg.JournalDate,
		arg.Reference,
		arg.Memo,
		arg.SourceType,
		arg.SourceID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.JournalDate,
		&i.Reference,
		&i.Memo,
		&i.SourceType,
		&i.SourceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteJournalEntry = `-- name: DeleteJournalEntry :exec
DELETE FROM journal_entries WHERE id = $1
`

func (q *Queries) DeleteJournalEntry(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteJournalEntry, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, code, name, type, parent_id, status, allow_manual_journal, created_at, created_by, updated_at, updated_by, revision FROM accounts WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Type,
		&i.ParentID,
		&i.Status,
		&i.AllowManualJournal,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getJournalEntry = `-- name: GetJournalEntry :one
SELECT id, journal_date, reference, memo, source_type, source_id, created_at, created_by, updated_at, updated_by, revision FROM journal_entries WHERE id = $1
`

func (q *Queries) GetJournalEntry(ctx context.Context, id uuid.UUID) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getJournalEntry, id)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.JournalDate,
		&i.Reference,
		&i.Memo,
		&i.SourceType,
		&i.SourceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, code, name, type, parent_id, status, allow_manual_journal, created_at, created_by, updated_at, updated_by, revision FROM accounts ORDER BY code LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Type,
			&i.ParentID,
			&i.Status,
			&i.AllowManualJournal,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJournalEntries = `-- name: ListJournalEntries :many
SELECT id, journal_date, reference, memo, source_type, source_id, created_at, created_by, updated_at, updated_by, revision FROM journal_entries ORDER BY journal_date DESC LIMIT $1 OFFSET $2
`

type ListJournalEntriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListJournalEntries(ctx context.Context, arg ListJournalEntriesParams) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, listJournalEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(
			&i.ID,
			&i.JournalDate,
			&i.Reference,
			&i.Memo,
			&i.SourceType,
			&i.SourceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLedgerEntries = `-- name: ListLedgerEntries :many

SELECT id, account_id, description, side, amount, transaction_date, cost_center_id, reference_type, reference_id, created_at, created_by, updated_at, updated_by, revision FROM ledger_entries ORDER BY transaction_date DESC LIMIT $1 OFFSET $2
`

type ListLedgerEntriesParams struct {
	Limit  int32
	Offset int32
}

// =====================================================
// Ledger Entries
// =====================================================
func (q *Queries) ListLedgerEntries(ctx context.Context, arg ListLedgerEntriesParams) ([]LedgerEntry, error) {
	rows, err := q.db.QueryContext(ctx, listLedgerEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerEntry
	for rows.Next() {
		var i LedgerEntry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Description,
			&i.Side,
			&i.Amount,
			&i.TransactionDate,
			&i.CostCenterID,
			&i.ReferenceType,
			&i.ReferenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET code = $2, name = $3, type = $4, parent_id = $5,
    status = $6, allow_manual_journal = $7,
    updated_by = $8, updated_at = now(), revision = revision + 1
WHERE id = $1
RETURNING id, code, name, type, parent_id, status, allow_manual_journal, created_at, created_by, updated_at, updated_by, revision
`

type UpdateAccountParams struct {
	ID                 uuid.UUID
	Code               string
	Name               string
	Type               string
	ParentID           uuid.NullUUID
	Status             string
	AllowManualJournal sql.NullBool
	UpdatedBy          sql.NullString
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.Type,
		arg.ParentID,
		arg.Status,
		arg.AllowManualJournal,
		arg.UpdatedBy,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Type,
		&i.ParentID,
		&i.Status,
		&i.AllowManualJournal,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const updateJournalEntry = `-- name: UpdateJournalEntry :one
UPDATE journal_entries
SET journal_date = $2, reference = $3, memo = $4,
    source_type = $5, source_id = $6,
    updated_by = $7, updated_at = now(), revision = revision + 1
WHERE id = $1
RETURNING id, journal_date, reference, memo, source_type, source_id, created_at, created_by, updated_at, updated_by, revision
`

type UpdateJournalEntryParams struct {
	ID          uuid.UUID
	JournalDate time.Time
	Reference   sql.NullString
	Memo        sql.NullString
	SourceType  sql.NullString
	SourceID    sql.NullString
	UpdatedBy   sql.NullString
}

func (q *Queries) UpdateJournalEntry(ctx context.Context, arg UpdateJournalEntryParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, updateJournalEntry,
		arg.ID,
		arg.JournalDate,
		arg.Reference,
		arg.Memo,
		arg.SourceType,
		arg.SourceID,
		arg.UpdatedBy,
	)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.JournalDate,
		&i.Reference,
		&i.Memo,
		&i.SourceType,
		&i.SourceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}
