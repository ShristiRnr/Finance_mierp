// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cash_flow_forecasts.sqlc.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const generateCashFlowForecast = `-- name: GenerateCashFlowForecast :one
INSERT INTO cash_flow_forecasts (
    organization_id, period_start, period_end, forecast_details
) VALUES ($1, $2, $3, $4)
RETURNING id, organization_id, period_start, period_end, forecast_details, created_at, created_by, updated_at, updated_by, revision
`

type GenerateCashFlowForecastParams struct {
	OrganizationID  string
	PeriodStart     time.Time
	PeriodEnd       time.Time
	ForecastDetails string
}

func (q *Queries) GenerateCashFlowForecast(ctx context.Context, arg GenerateCashFlowForecastParams) (CashFlowForecast, error) {
	row := q.db.QueryRowContext(ctx, generateCashFlowForecast,
		arg.OrganizationID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.ForecastDetails,
	)
	var i CashFlowForecast
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.ForecastDetails,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getCashFlowForecast = `-- name: GetCashFlowForecast :one
SELECT id, organization_id, period_start, period_end, forecast_details, created_at, created_by, updated_at, updated_by, revision 
FROM cash_flow_forecasts
WHERE id = $1
`

func (q *Queries) GetCashFlowForecast(ctx context.Context, id uuid.UUID) (CashFlowForecast, error) {
	row := q.db.QueryRowContext(ctx, getCashFlowForecast, id)
	var i CashFlowForecast
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.ForecastDetails,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listCashFlowForecasts = `-- name: ListCashFlowForecasts :many
SELECT id, organization_id, period_start, period_end, forecast_details, created_at, created_by, updated_at, updated_by, revision
FROM cash_flow_forecasts
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCashFlowForecastsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListCashFlowForecasts(ctx context.Context, arg ListCashFlowForecastsParams) ([]CashFlowForecast, error) {
	rows, err := q.db.QueryContext(ctx, listCashFlowForecasts, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CashFlowForecast
	for rows.Next() {
		var i CashFlowForecast
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.ForecastDetails,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
