// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gst.sqlc.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addGstBreakup = `-- name: AddGstBreakup :one
INSERT INTO gst_breakups (invoice_id, taxable_amount, cgst, sgst, igst, total_gst)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, invoice_id, taxable_amount, cgst, sgst, igst, total_gst, created_at, created_by, revision
`

type AddGstBreakupParams struct {
	InvoiceID     uuid.UUID
	TaxableAmount string
	Cgst          sql.NullString
	Sgst          sql.NullString
	Igst          sql.NullString
	TotalGst      sql.NullString
}

func (q *Queries) AddGstBreakup(ctx context.Context, arg AddGstBreakupParams) (GstBreakup, error) {
	row := q.db.QueryRowContext(ctx, addGstBreakup,
		arg.InvoiceID,
		arg.TaxableAmount,
		arg.Cgst,
		arg.Sgst,
		arg.Igst,
		arg.TotalGst,
	)
	var i GstBreakup
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.TaxableAmount,
		&i.Cgst,
		&i.Sgst,
		&i.Igst,
		&i.TotalGst,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}

const addGstDocStatus = `-- name: AddGstDocStatus :one
INSERT INTO gst_doc_statuses (
    invoice_id, einvoice_status, irn, ack_no, ack_date,
    eway_status, eway_bill_no, eway_valid_upto, last_error, last_synced_at
)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
RETURNING id, invoice_id, einvoice_status, irn, ack_no, ack_date, eway_status, eway_bill_no, eway_valid_upto, last_error, last_synced_at, created_at, created_by, revision
`

type AddGstDocStatusParams struct {
	InvoiceID      uuid.UUID
	EinvoiceStatus sql.NullString
	Irn            sql.NullString
	AckNo          sql.NullString
	AckDate        sql.NullTime
	EwayStatus     sql.NullString
	EwayBillNo     sql.NullString
	EwayValidUpto  sql.NullTime
	LastError      sql.NullString
	LastSyncedAt   sql.NullTime
}

func (q *Queries) AddGstDocStatus(ctx context.Context, arg AddGstDocStatusParams) (GstDocStatus, error) {
	row := q.db.QueryRowContext(ctx, addGstDocStatus,
		arg.InvoiceID,
		arg.EinvoiceStatus,
		arg.Irn,
		arg.AckNo,
		arg.AckDate,
		arg.EwayStatus,
		arg.EwayBillNo,
		arg.EwayValidUpto,
		arg.LastError,
		arg.LastSyncedAt,
	)
	var i GstDocStatus
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.EinvoiceStatus,
		&i.Irn,
		&i.AckNo,
		&i.AckDate,
		&i.EwayStatus,
		&i.EwayBillNo,
		&i.EwayValidUpto,
		&i.LastError,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}

const addGstRegime = `-- name: AddGstRegime :one
INSERT INTO gst_regimes (invoice_id, gstin, place_of_supply, reverse_charge)
VALUES ($1, $2, $3, $4)
RETURNING id, invoice_id, gstin, place_of_supply, reverse_charge, created_at, created_by, revision
`

type AddGstRegimeParams struct {
	InvoiceID     uuid.UUID
	Gstin         string
	PlaceOfSupply string
	ReverseCharge sql.NullBool
}

func (q *Queries) AddGstRegime(ctx context.Context, arg AddGstRegimeParams) (GstRegime, error) {
	row := q.db.QueryRowContext(ctx, addGstRegime,
		arg.InvoiceID,
		arg.Gstin,
		arg.PlaceOfSupply,
		arg.ReverseCharge,
	)
	var i GstRegime
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Gstin,
		&i.PlaceOfSupply,
		&i.ReverseCharge,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}

const getGstBreakup = `-- name: GetGstBreakup :one
SELECT id, invoice_id, taxable_amount, cgst, sgst, igst, total_gst, created_at, created_by, revision FROM gst_breakups WHERE invoice_id = $1
`

func (q *Queries) GetGstBreakup(ctx context.Context, invoiceID uuid.UUID) (GstBreakup, error) {
	row := q.db.QueryRowContext(ctx, getGstBreakup, invoiceID)
	var i GstBreakup
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.TaxableAmount,
		&i.Cgst,
		&i.Sgst,
		&i.Igst,
		&i.TotalGst,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}

const getGstDocStatus = `-- name: GetGstDocStatus :one
SELECT id, invoice_id, einvoice_status, irn, ack_no, ack_date, eway_status, eway_bill_no, eway_valid_upto, last_error, last_synced_at, created_at, created_by, revision FROM gst_doc_statuses WHERE invoice_id = $1
`

func (q *Queries) GetGstDocStatus(ctx context.Context, invoiceID uuid.UUID) (GstDocStatus, error) {
	row := q.db.QueryRowContext(ctx, getGstDocStatus, invoiceID)
	var i GstDocStatus
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.EinvoiceStatus,
		&i.Irn,
		&i.AckNo,
		&i.AckDate,
		&i.EwayStatus,
		&i.EwayBillNo,
		&i.EwayValidUpto,
		&i.LastError,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}

const getGstRegime = `-- name: GetGstRegime :one
SELECT id, invoice_id, gstin, place_of_supply, reverse_charge, created_at, created_by, revision FROM gst_regimes WHERE invoice_id = $1
`

func (q *Queries) GetGstRegime(ctx context.Context, invoiceID uuid.UUID) (GstRegime, error) {
	row := q.db.QueryRowContext(ctx, getGstRegime, invoiceID)
	var i GstRegime
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Gstin,
		&i.PlaceOfSupply,
		&i.ReverseCharge,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Revision,
	)
	return i, err
}
