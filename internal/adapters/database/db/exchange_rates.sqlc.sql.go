// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_rates.sqlc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createExchangeRate = `-- name: CreateExchangeRate :one
INSERT INTO exchange_rates (
    base_currency, quote_currency, rate, as_of,
    created_by, updated_by, revision
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7
) RETURNING id, base_currency, quote_currency, rate, as_of, created_at, created_by, updated_at, updated_by, revision
`

type CreateExchangeRateParams struct {
	BaseCurrency  string
	QuoteCurrency string
	Rate          string
	AsOf          time.Time
	CreatedBy     sql.NullString
	UpdatedBy     sql.NullString
	Revision      sql.NullString
}

// Create a new exchange rate
func (q *Queries) CreateExchangeRate(ctx context.Context, arg CreateExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, createExchangeRate,
		arg.BaseCurrency,
		arg.QuoteCurrency,
		arg.Rate,
		arg.AsOf,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.Revision,
	)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.Rate,
		&i.AsOf,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const deleteExchangeRate = `-- name: DeleteExchangeRate :exec
DELETE FROM exchange_rates WHERE id = $1
`

// Delete exchange rate
func (q *Queries) DeleteExchangeRate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteExchangeRate, id)
	return err
}

const getExchangeRate = `-- name: GetExchangeRate :one
SELECT id, base_currency, quote_currency, rate, as_of, created_at, created_by, updated_at, updated_by, revision FROM exchange_rates WHERE id = $1
`

// Fetch single exchange rate by ID
func (q *Queries) GetExchangeRate(ctx context.Context, id uuid.UUID) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, getExchangeRate, id)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.Rate,
		&i.AsOf,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const getLatestRate = `-- name: GetLatestRate :one
SELECT id, base_currency, quote_currency, rate, as_of, created_at, created_by, updated_at, updated_by, revision
FROM exchange_rates
WHERE base_currency = $1
  AND quote_currency = $2
  AND as_of <= $3
ORDER BY as_of DESC
LIMIT 1
`

type GetLatestRateParams struct {
	BaseCurrency  string
	QuoteCurrency string
	AsOf          time.Time
}

// Fetch the latest rate for a currency pair as of timestamp
func (q *Queries) GetLatestRate(ctx context.Context, arg GetLatestRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, getLatestRate, arg.BaseCurrency, arg.QuoteCurrency, arg.AsOf)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.Rate,
		&i.AsOf,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listExchangeRates = `-- name: ListExchangeRates :many
SELECT id, base_currency, quote_currency, rate, as_of, created_at, created_by, updated_at, updated_by, revision
FROM exchange_rates
WHERE
    ($1::TEXT IS NULL OR base_currency = $1)
    AND ($2::TEXT IS NULL OR quote_currency = $2)
ORDER BY as_of DESC
LIMIT $3 OFFSET $4
`

type ListExchangeRatesParams struct {
	Column1 string
	Column2 string
	Limit   int32
	Offset  int32
}

// List exchange rates (with optional filters)
func (q *Queries) ListExchangeRates(ctx context.Context, arg ListExchangeRatesParams) ([]ExchangeRate, error) {
	rows, err := q.db.QueryContext(ctx, listExchangeRates,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExchangeRate
	for rows.Next() {
		var i ExchangeRate
		if err := rows.Scan(
			&i.ID,
			&i.BaseCurrency,
			&i.QuoteCurrency,
			&i.Rate,
			&i.AsOf,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExchangeRate = `-- name: UpdateExchangeRate :one
UPDATE exchange_rates
SET
    base_currency = $2,
    quote_currency = $3,
    rate = $4,
    as_of = $5,
    updated_by = $6,
    revision = $7,
    updated_at = now()
WHERE id = $1
RETURNING id, base_currency, quote_currency, rate, as_of, created_at, created_by, updated_at, updated_by, revision
`

type UpdateExchangeRateParams struct {
	ID            uuid.UUID
	BaseCurrency  string
	QuoteCurrency string
	Rate          string
	AsOf          time.Time
	UpdatedBy     sql.NullString
	Revision      sql.NullString
}

// Update exchange rate
func (q *Queries) UpdateExchangeRate(ctx context.Context, arg UpdateExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, updateExchangeRate,
		arg.ID,
		arg.BaseCurrency,
		arg.QuoteCurrency,
		arg.Rate,
		arg.AsOf,
		arg.UpdatedBy,
		arg.Revision,
	)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.Rate,
		&i.AsOf,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}
