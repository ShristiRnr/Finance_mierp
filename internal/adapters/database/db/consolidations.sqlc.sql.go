// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: consolidations.sqlc.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createConsolidation = `-- name: CreateConsolidation :one
INSERT INTO consolidations (
    entity_ids, period_start, period_end, report
) VALUES ($1, $2, $3, $4)
RETURNING id, entity_ids, period_start, period_end, report, created_at, created_by, updated_at, updated_by, revision
`

type CreateConsolidationParams struct {
	EntityIds   []string
	PeriodStart time.Time
	PeriodEnd   time.Time
	Report      string
}

func (q *Queries) CreateConsolidation(ctx context.Context, arg CreateConsolidationParams) (Consolidation, error) {
	row := q.db.QueryRowContext(ctx, createConsolidation,
		pq.Array(arg.EntityIds),
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.Report,
	)
	var i Consolidation
	err := row.Scan(
		&i.ID,
		pq.Array(&i.EntityIds),
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.Report,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const deleteConsolidation = `-- name: DeleteConsolidation :exec
DELETE FROM consolidations WHERE id = $1
`

func (q *Queries) DeleteConsolidation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteConsolidation, id)
	return err
}

const getConsolidation = `-- name: GetConsolidation :one
SELECT id, entity_ids, period_start, period_end, report, created_at, created_by, updated_at, updated_by, revision FROM consolidations WHERE id = $1
`

func (q *Queries) GetConsolidation(ctx context.Context, id uuid.UUID) (Consolidation, error) {
	row := q.db.QueryRowContext(ctx, getConsolidation, id)
	var i Consolidation
	err := row.Scan(
		&i.ID,
		pq.Array(&i.EntityIds),
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.Report,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listConsolidations = `-- name: ListConsolidations :many
SELECT id, entity_ids, period_start, period_end, report, created_at, created_by, updated_at, updated_by, revision
FROM consolidations
WHERE (entity_ids && $1::text[])  -- overlap with requested entities
  AND period_start >= $2
  AND period_end <= $3
ORDER BY created_at DESC
LIMIT $4 OFFSET $5
`

type ListConsolidationsParams struct {
	Column1     []string
	PeriodStart time.Time
	PeriodEnd   time.Time
	Limit       int32
	Offset      int32
}

func (q *Queries) ListConsolidations(ctx context.Context, arg ListConsolidationsParams) ([]Consolidation, error) {
	rows, err := q.db.QueryContext(ctx, listConsolidations,
		pq.Array(arg.Column1),
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Consolidation
	for rows.Next() {
		var i Consolidation
		if err := rows.Scan(
			&i.ID,
			pq.Array(&i.EntityIds),
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.Report,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
