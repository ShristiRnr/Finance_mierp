// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credit_debit.sqlc.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCreditDebitNote = `-- name: CreateCreditDebitNote :one
INSERT INTO credit_debit_notes (
    invoice_id, type, amount, reason, created_by, updated_by, revision
) VALUES (
    $1, $2, $3, $4, $5, $6, 1
) RETURNING id, invoice_id, type, amount, reason, created_at, created_by, updated_at, updated_by, revision
`

type CreateCreditDebitNoteParams struct {
	InvoiceID uuid.UUID
	Type      string
	Amount    string
	Reason    sql.NullString
	CreatedBy sql.NullString
	UpdatedBy sql.NullString
}

func (q *Queries) CreateCreditDebitNote(ctx context.Context, arg CreateCreditDebitNoteParams) (CreditDebitNote, error) {
	row := q.db.QueryRowContext(ctx, createCreditDebitNote,
		arg.InvoiceID,
		arg.Type,
		arg.Amount,
		arg.Reason,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i CreditDebitNote
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Type,
		&i.Amount,
		&i.Reason,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const deleteCreditDebitNote = `-- name: DeleteCreditDebitNote :exec
DELETE FROM credit_debit_notes WHERE id = $1
`

func (q *Queries) DeleteCreditDebitNote(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCreditDebitNote, id)
	return err
}

const getCreditDebitNote = `-- name: GetCreditDebitNote :one
SELECT id, invoice_id, type, amount, reason, created_at, created_by, updated_at, updated_by, revision FROM credit_debit_notes WHERE id = $1
`

func (q *Queries) GetCreditDebitNote(ctx context.Context, id uuid.UUID) (CreditDebitNote, error) {
	row := q.db.QueryRowContext(ctx, getCreditDebitNote, id)
	var i CreditDebitNote
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Type,
		&i.Amount,
		&i.Reason,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const listCreditDebitNotes = `-- name: ListCreditDebitNotes :many
SELECT id, invoice_id, type, amount, reason, created_at, created_by, updated_at, updated_by, revision 
FROM credit_debit_notes
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCreditDebitNotesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCreditDebitNotes(ctx context.Context, arg ListCreditDebitNotesParams) ([]CreditDebitNote, error) {
	rows, err := q.db.QueryContext(ctx, listCreditDebitNotes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreditDebitNote
	for rows.Next() {
		var i CreditDebitNote
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Type,
			&i.Amount,
			&i.Reason,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Revision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreditDebitNote = `-- name: UpdateCreditDebitNote :one
UPDATE credit_debit_notes
SET 
    invoice_id = $2,
    type = $3,
    amount = $4,
    reason = $5,
    updated_by = $6,
    revision = revision + 1,
    updated_at = now()
WHERE id = $1
RETURNING id, invoice_id, type, amount, reason, created_at, created_by, updated_at, updated_by, revision
`

type UpdateCreditDebitNoteParams struct {
	ID        uuid.UUID
	InvoiceID uuid.UUID
	Type      string
	Amount    string
	Reason    sql.NullString
	UpdatedBy sql.NullString
}

func (q *Queries) UpdateCreditDebitNote(ctx context.Context, arg UpdateCreditDebitNoteParams) (CreditDebitNote, error) {
	row := q.db.QueryRowContext(ctx, updateCreditDebitNote,
		arg.ID,
		arg.InvoiceID,
		arg.Type,
		arg.Amount,
		arg.Reason,
		arg.UpdatedBy,
	)
	var i CreditDebitNote
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Type,
		&i.Amount,
		&i.Reason,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}
