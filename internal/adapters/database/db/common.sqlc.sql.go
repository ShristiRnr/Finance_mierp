// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: common.sqlc.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuditFields = `-- name: CreateAuditFields :one
INSERT INTO audit_fields (created_by, updated_by, revision)
VALUES ($1, $2, $3)
RETURNING id, created_at, created_by, updated_at, updated_by, revision
`

type CreateAuditFieldsParams struct {
	CreatedBy sql.NullString
	UpdatedBy sql.NullString
	Revision  sql.NullString
}

func (q *Queries) CreateAuditFields(ctx context.Context, arg CreateAuditFieldsParams) (AuditField, error) {
	row := q.db.QueryRowContext(ctx, createAuditFields, arg.CreatedBy, arg.UpdatedBy, arg.Revision)
	var i AuditField
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Revision,
	)
	return i, err
}

const createRequestMetadata = `-- name: CreateRequestMetadata :one

INSERT INTO request_metadata (request_id, organization_id, tenant_id, auth_subject, source_system, trace_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, request_id, organization_id, tenant_id, auth_subject, source_system, trace_id, created_at
`

type CreateRequestMetadataParams struct {
	RequestID      string
	OrganizationID sql.NullString
	TenantID       sql.NullString
	AuthSubject    sql.NullString
	SourceSystem   sql.NullString
	TraceID        sql.NullString
}

// Organizations / Tenants ka part alag schema mein hoga
// फिलहाल सिर्फ common entities
func (q *Queries) CreateRequestMetadata(ctx context.Context, arg CreateRequestMetadataParams) (RequestMetadatum, error) {
	row := q.db.QueryRowContext(ctx, createRequestMetadata,
		arg.RequestID,
		arg.OrganizationID,
		arg.TenantID,
		arg.AuthSubject,
		arg.SourceSystem,
		arg.TraceID,
	)
	var i RequestMetadatum
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.OrganizationID,
		&i.TenantID,
		&i.AuthSubject,
		&i.SourceSystem,
		&i.TraceID,
		&i.CreatedAt,
	)
	return i, err
}

const getRequestMetadata = `-- name: GetRequestMetadata :one
SELECT id, request_id, organization_id, tenant_id, auth_subject, source_system, trace_id, created_at FROM request_metadata WHERE id = $1
`

func (q *Queries) GetRequestMetadata(ctx context.Context, id uuid.UUID) (RequestMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getRequestMetadata, id)
	var i RequestMetadatum
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.OrganizationID,
		&i.TenantID,
		&i.AuthSubject,
		&i.SourceSystem,
		&i.TraceID,
		&i.CreatedAt,
	)
	return i, err
}
