// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: finance_events.sqlc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const insertInventoryCostPostedEvent = `-- name: InsertInventoryCostPostedEvent :one
INSERT INTO inventory_cost_posted_events (
    reference_type, reference_id, amount, cost_center_id, organization_id
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, reference_type, reference_id, amount, cost_center_id, organization_id, created_at
`

type InsertInventoryCostPostedEventParams struct {
	ReferenceType  string
	ReferenceID    uuid.UUID
	Amount         string
	CostCenterID   sql.NullString
	OrganizationID string
}

// =====================================================
// Inventory Cost Posted Events
// =====================================================
func (q *Queries) InsertInventoryCostPostedEvent(ctx context.Context, arg InsertInventoryCostPostedEventParams) (InventoryCostPostedEvent, error) {
	row := q.db.QueryRowContext(ctx, insertInventoryCostPostedEvent,
		arg.ReferenceType,
		arg.ReferenceID,
		arg.Amount,
		arg.CostCenterID,
		arg.OrganizationID,
	)
	var i InventoryCostPostedEvent
	err := row.Scan(
		&i.ID,
		&i.ReferenceType,
		&i.ReferenceID,
		&i.Amount,
		&i.CostCenterID,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const insertInvoiceCreatedEvent = `-- name: InsertInvoiceCreatedEvent :one
INSERT INTO finance_invoice_created_events (
    invoice_id, invoice_number, invoice_date, total, organization_id
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, invoice_id, invoice_number, invoice_date, total, organization_id, created_at
`

type InsertInvoiceCreatedEventParams struct {
	InvoiceID      uuid.UUID
	InvoiceNumber  string
	InvoiceDate    time.Time
	Total          string
	OrganizationID string
}

// =====================================================
// Finance Invoice Created Events
// =====================================================
func (q *Queries) InsertInvoiceCreatedEvent(ctx context.Context, arg InsertInvoiceCreatedEventParams) (FinanceInvoiceCreatedEvent, error) {
	row := q.db.QueryRowContext(ctx, insertInvoiceCreatedEvent,
		arg.InvoiceID,
		arg.InvoiceNumber,
		arg.InvoiceDate,
		arg.Total,
		arg.OrganizationID,
	)
	var i FinanceInvoiceCreatedEvent
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceDate,
		&i.Total,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const insertPaymentReceivedEvent = `-- name: InsertPaymentReceivedEvent :one
INSERT INTO finance_payment_received_events (
    payment_due_id, invoice_id, amount_paid, paid_at, reference, organization_id
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, payment_due_id, invoice_id, amount_paid, paid_at, reference, organization_id, created_at
`

type InsertPaymentReceivedEventParams struct {
	PaymentDueID   uuid.UUID
	InvoiceID      uuid.UUID
	AmountPaid     string
	PaidAt         time.Time
	Reference      sql.NullString
	OrganizationID string
}

// =====================================================
// Finance Payment Received Events
// =====================================================
func (q *Queries) InsertPaymentReceivedEvent(ctx context.Context, arg InsertPaymentReceivedEventParams) (FinancePaymentReceivedEvent, error) {
	row := q.db.QueryRowContext(ctx, insertPaymentReceivedEvent,
		arg.PaymentDueID,
		arg.InvoiceID,
		arg.AmountPaid,
		arg.PaidAt,
		arg.Reference,
		arg.OrganizationID,
	)
	var i FinancePaymentReceivedEvent
	err := row.Scan(
		&i.ID,
		&i.PaymentDueID,
		&i.InvoiceID,
		&i.AmountPaid,
		&i.PaidAt,
		&i.Reference,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const insertPayrollPostedEvent = `-- name: InsertPayrollPostedEvent :one
INSERT INTO payroll_posted_events (
    payroll_run_id, total_gross, total_net, run_date, organization_id
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, payroll_run_id, total_gross, total_net, run_date, organization_id, created_at
`

type InsertPayrollPostedEventParams struct {
	PayrollRunID   uuid.UUID
	TotalGross     string
	TotalNet       string
	RunDate        time.Time
	OrganizationID string
}

// =====================================================
// Payroll Posted Events
// =====================================================
func (q *Queries) InsertPayrollPostedEvent(ctx context.Context, arg InsertPayrollPostedEventParams) (PayrollPostedEvent, error) {
	row := q.db.QueryRowContext(ctx, insertPayrollPostedEvent,
		arg.PayrollRunID,
		arg.TotalGross,
		arg.TotalNet,
		arg.RunDate,
		arg.OrganizationID,
	)
	var i PayrollPostedEvent
	err := row.Scan(
		&i.ID,
		&i.PayrollRunID,
		&i.TotalGross,
		&i.TotalNet,
		&i.RunDate,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const insertVendorBillApprovedEvent = `-- name: InsertVendorBillApprovedEvent :one
INSERT INTO vendor_bill_approved_events (
    vendor_bill_id, amount, approved_at, organization_id
) VALUES ($1, $2, $3, $4)
RETURNING id, vendor_bill_id, amount, approved_at, organization_id, created_at
`

type InsertVendorBillApprovedEventParams struct {
	VendorBillID   uuid.UUID
	Amount         string
	ApprovedAt     time.Time
	OrganizationID string
}

// =====================================================
// Vendor Bill Approved Events
// =====================================================
func (q *Queries) InsertVendorBillApprovedEvent(ctx context.Context, arg InsertVendorBillApprovedEventParams) (VendorBillApprovedEvent, error) {
	row := q.db.QueryRowContext(ctx, insertVendorBillApprovedEvent,
		arg.VendorBillID,
		arg.Amount,
		arg.ApprovedAt,
		arg.OrganizationID,
	)
	var i VendorBillApprovedEvent
	err := row.Scan(
		&i.ID,
		&i.VendorBillID,
		&i.Amount,
		&i.ApprovedAt,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const listInventoryCostPostedEvents = `-- name: ListInventoryCostPostedEvents :many
SELECT id, reference_type, reference_id, amount, cost_center_id, organization_id, created_at 
FROM inventory_cost_posted_events
WHERE organization_id = $1
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type ListInventoryCostPostedEventsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListInventoryCostPostedEvents(ctx context.Context, arg ListInventoryCostPostedEventsParams) ([]InventoryCostPostedEvent, error) {
	rows, err := q.db.QueryContext(ctx, listInventoryCostPostedEvents, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryCostPostedEvent
	for rows.Next() {
		var i InventoryCostPostedEvent
		if err := rows.Scan(
			&i.ID,
			&i.ReferenceType,
			&i.ReferenceID,
			&i.Amount,
			&i.CostCenterID,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoiceCreatedEvents = `-- name: ListInvoiceCreatedEvents :many
SELECT id, invoice_id, invoice_number, invoice_date, total, organization_id, created_at 
FROM finance_invoice_created_events
WHERE organization_id = $1
ORDER BY invoice_date DESC
LIMIT $2 OFFSET $3
`

type ListInvoiceCreatedEventsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListInvoiceCreatedEvents(ctx context.Context, arg ListInvoiceCreatedEventsParams) ([]FinanceInvoiceCreatedEvent, error) {
	rows, err := q.db.QueryContext(ctx, listInvoiceCreatedEvents, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceInvoiceCreatedEvent
	for rows.Next() {
		var i FinanceInvoiceCreatedEvent
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.InvoiceDate,
			&i.Total,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentReceivedEvents = `-- name: ListPaymentReceivedEvents :many
SELECT id, payment_due_id, invoice_id, amount_paid, paid_at, reference, organization_id, created_at 
FROM finance_payment_received_events
WHERE organization_id = $1
ORDER BY paid_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentReceivedEventsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListPaymentReceivedEvents(ctx context.Context, arg ListPaymentReceivedEventsParams) ([]FinancePaymentReceivedEvent, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentReceivedEvents, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinancePaymentReceivedEvent
	for rows.Next() {
		var i FinancePaymentReceivedEvent
		if err := rows.Scan(
			&i.ID,
			&i.PaymentDueID,
			&i.InvoiceID,
			&i.AmountPaid,
			&i.PaidAt,
			&i.Reference,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPayrollPostedEvents = `-- name: ListPayrollPostedEvents :many
SELECT id, payroll_run_id, total_gross, total_net, run_date, organization_id, created_at
FROM payroll_posted_events
WHERE organization_id = $1
ORDER BY run_date DESC
LIMIT $2 OFFSET $3
`

type ListPayrollPostedEventsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListPayrollPostedEvents(ctx context.Context, arg ListPayrollPostedEventsParams) ([]PayrollPostedEvent, error) {
	rows, err := q.db.QueryContext(ctx, listPayrollPostedEvents, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PayrollPostedEvent
	for rows.Next() {
		var i PayrollPostedEvent
		if err := rows.Scan(
			&i.ID,
			&i.PayrollRunID,
			&i.TotalGross,
			&i.TotalNet,
			&i.RunDate,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVendorBillApprovedEvents = `-- name: ListVendorBillApprovedEvents :many
SELECT id, vendor_bill_id, amount, approved_at, organization_id, created_at
FROM vendor_bill_approved_events
WHERE organization_id = $1
ORDER BY approved_at DESC
LIMIT $2 OFFSET $3
`

type ListVendorBillApprovedEventsParams struct {
	OrganizationID string
	Limit          int32
	Offset         int32
}

func (q *Queries) ListVendorBillApprovedEvents(ctx context.Context, arg ListVendorBillApprovedEventsParams) ([]VendorBillApprovedEvent, error) {
	rows, err := q.db.QueryContext(ctx, listVendorBillApprovedEvents, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VendorBillApprovedEvent
	for rows.Next() {
		var i VendorBillApprovedEvent
		if err := rows.Scan(
			&i.ID,
			&i.VendorBillID,
			&i.Amount,
			&i.ApprovedAt,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
